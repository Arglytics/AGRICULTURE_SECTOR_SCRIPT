#importing the libraries
import pandas as pd
import pyodbc,datetime
import warnings
warnings.filterwarnings('ignore')
from dateutil.relativedelta import relativedelta

#connecting to the msdb database 
print("|-connecting to DASH20")
connection=pyodbc.connect("Driver={SQL Server Native Client 11.0};"
                      "Server=10.128.0.170;"
                      "Database=DASH20;"
                      "Trusted_Connection=yes;")

# export_path = "//10.128.0.169/Extracted_Files_Do_Not_Delete/CX_Files/"
export_path= r"//10.128.0.169/Extracted_Files_Do_Not_Delete/Agriculture_Sector/"

sector_overview="""


 ----Agriculture accounts
--sector_overview
--DF01
DECLARE @REP_DATE AS DATE=cast(getdate()-1 as date);
WITH CTE1 AS (
SELECT * FROM ACCOUNT_ACTIVITY
WHERE REPORTING_DATE=@REP_DATE
),

CTE2 AS (
SELECT DISTINCT ACCOUNT_NUMBER,A.CUSTOMER_ID,ACCOUNT_NAME,PRODUCT_CODE,ACCOUNT_OPEN_DATE,

CASE WHEN INDUSTRY_TYPE ='DF01'THEN 'YES'
ELSE 'NO' END AS SCHOOL_PAY


FROM dimACCOUNTS A
--LEFT OUTER JOIN AGENT_DEPOSITS AA ON AA.CREDITED_ACCOUNT=ACCOUNT_NUMBER
LEFT OUTER JOIN DIMCUSTOMERS C ON C.CUSTOMER_ID=A.CUSTOMER_ID
LEFT OUTER JOIN DIMSEGMENTS G ON C.SEGMENT_CODE = G.SEGMENT_CODE
 WHERE INDUSTRY_TYPE ='DF01' AND SUB_BUSINESS_UNIT_CODE <> 'CIB'

),

CTE3 AS (
SELECT  C.CUSTOMER_ID,C.BRANCH_ID,BRANCH_NAME,REGION_NAME,PHONE,CUSTOMER_OPEN_DATE,
BANK_SECTOR_DESCRIPTION,INDUSTRY_TYPE,SUB_BUSINESS_UNIT_CODE
,CASE WHEN C.CUSTOMER_ID = N.CUSTOMER_ID THEN 'YES' ELSE 'NO' END AS QUICK_BANKING_ONBOARDED
,CASE WHEN CUSTOMER_OPEN_DATE >= DATEADD(MONTH, -1, GETDATE()) THEN 'Yes'
        ELSE 'No'
    END AS IS_OPENED_LAST_MONTH
FROM dimCUSTOMERS C
LEFT OUTER JOIN dimBANK_SECTORS B ON B.BANK_SECTOR_ID=C.INDUSTRY_TYPE
LEFT OUTER JOIN dimBRANCHES BB ON BB.BRANCH_ID=C.BRANCH_ID
LEFT OUTER JOIN dimREGIONS R ON R.REGION_CODE=BB.REGION_CODE
LEFT OUTER JOIN dimSEGMENTS S ON S.SEGMENT_CODE=C.SEGMENT_CODE
LEFT OUTER JOIN (
SELECT DISTINCT CUSTOMER_ID FROM 
QuickOnBoarding )N ON N.CUSTOMER_ID=C.CUSTOMER_ID
),
CTE4 AS (SELECT * FROM CUSTOMER_DETAILS)
,CTE5 AS (
SELECT CTE1.ACCOUNT_NUMBER,
CTE1.CUSTOMER_ID,
CTE2.ACCOUNT_NAME,ACCOUNT_OPEN_DATE,CUSTOMER_OPEN_DATE,
IS_OPENED_LAST_MONTH,
ACCOUNT_STATUS,CLOSURE_FLAG,
CUSTOMER_TYPE,PRODUCT_CODE,SUB_BUSINESS_UNIT_CODE,
CTE3.BANK_SECTOR_DESCRIPTION,PHONE
,BRANCH_NAME,REGION_NAME,QUICK_BANKING_ONBOARDED,SCHOOL_PAY,
REPORTING_DATE
FROM CTE1
LEFT OUTER JOIN CTE2 ON CTE2.ACCOUNT_NUMBER=CTE1.ACCOUNT_NUMBER
LEFT OUTER JOIN CTE3 ON CTE3.CUSTOMER_ID=CTE2.CUSTOMER_ID
LEFT OUTER JOIN CTE4 ON CTE4.CUSTOMER_ID=CTE3.CUSTOMER_ID
WHERE  CTE3.INDUSTRY_TYPE IN ('DF01')
AND SUB_BUSINESS_UNIT_CODE <>'CIB'
AND CLOSURE_FLAG<>'Y'
--AND CUSTOMER_TYPE<>1
)
SELECT DISTINCT * FROM CTE5

"""
#sector_overview_existing=pd.read_csv(export_path+'Health&Education_sector.txt')
sector_overview_new=pd.read_sql(sector_overview,connection)
#sector_overview_final=pd.concat([sector_overview_existing,sector_overview_new])
sector_overview_new.to_csv(export_path+'Health&Education_sector.txt',index=False)
print('|----Health&Education_sector')


##LOAN PORTFOLIO

loan_overview="""
----DECLARE @REP_DATE AS DATE='2023-01-19'

 --loans
SELECT DISTINCT ACCOUNT_NUMBER,
L.CUSTOMER_ID,ACCOUNT_NAME,BANK_SECTOR_DESCRIPTION,L.BANK_SECTOR_ID,
BRANCH_NAME,REGION_NAME,DAYS_PAST_DUE_COMPUTED,
(-1*GROSS_BALANCE_BASE) AS GROSS_BALANCE,
SUB_USER_CLASS_CODE,PRODUCT_DESCRIPTION,PRODUCT_GROUP_ID,SUB_BUSINESS_UNIT_CODE
, REPORTING_DATE
FROM LOAN_LISTING L
LEFT OUTER JOIN dimCUSTOMERS C ON C.CUSTOMER_ID=L.CUSTOMER_ID
LEFT OUTER JOIN dimBANK_SECTORS S ON S.BANK_SECTOR_ID=C.INDUSTRY_TYPE
LEFT OUTER JOIN CUSTOMER_DETAILS d on d.CUSTOMER_ID=l.CUSTOMER_ID
LEFT OUTER JOIN dimBRANCHES B ON B.BRANCH_ID=L.BRANCH_ID
LEFT OUTER JOIN dimREGIONS R ON R.REGION_CODE=B.REGION_CODE
LEFT OUTER JOIN dimPRODUCTS P ON P.PRODUCT_CODE=L.PRODUCT_CODE
LEFT OUTER JOIN dimSEGMENTS SS ON SS.SEGMENT_CODE=C.SEGMENT_CODE
WHERE REPORTING_DATE IN (
   select distinct EOMONTH(PK_Date) from dimDate where PK_Date between
DATEADD(yy,0,DATEADD(yy,DATEDIFF(yy,0,GETDATE()),0)) 
AND DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1))
AND C.INDUSTRY_TYPE IN (
'DF01')
--and CUSTOMER_TYPE<>0
--ORDER BY REPORTING_DATE DESC
--AND ACCOUNT_NUMBER='01905088529112'

UNION 
SELECT DISTINCT ACCOUNT_NUMBER,
L.CUSTOMER_ID,ACCOUNT_NAME,BANK_SECTOR_DESCRIPTION,L.BANK_SECTOR_ID,
BRANCH_NAME,REGION_NAME,DAYS_PAST_DUE_COMPUTED,
(-1*GROSS_BALANCE_BASE) AS GROSS_BALANCE,
SUB_USER_CLASS_CODE,PRODUCT_DESCRIPTION,PRODUCT_GROUP_ID,SUB_BUSINESS_UNIT_CODE
, REPORTING_DATE
FROM LIMITS L
LEFT OUTER JOIN dimCUSTOMERS C ON C.CUSTOMER_ID=L.CUSTOMER_ID
LEFT OUTER JOIN dimBANK_SECTORS S ON S.BANK_SECTOR_ID=C.INDUSTRY_TYPE
LEFT OUTER JOIN CUSTOMER_DETAILS d on d.CUSTOMER_ID=l.CUSTOMER_ID
LEFT OUTER JOIN dimBRANCHES B ON B.BRANCH_ID=L.BRANCH_ID
LEFT OUTER JOIN dimREGIONS R ON R.REGION_CODE=B.REGION_CODE
LEFT OUTER JOIN dimPRODUCTS P ON P.PRODUCT_CODE=L.PRODUCT_CODE
LEFT OUTER JOIN dimSEGMENTS SS ON SS.SEGMENT_CODE=C.SEGMENT_CODE
WHERE REPORTING_DATE IN (
   select distinct EOMONTH(PK_Date) from dimDate where PK_Date between
DATEADD(yy,0,DATEADD(yy,DATEDIFF(yy,0,GETDATE()),0)) 
AND DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1))
AND C.INDUSTRY_TYPE IN (
'DF01')
and CUSTOMER_TYPE<>0
ORDER BY REPORTING_DATE DESC

"""
##loan_overview_existing=pd.read_csv(export_path+'Health&Edc_loanportfolio.txt')
loan_overview_new=pd.read_sql(loan_overview,connection)
#loan_overview_final=pd.concat([loan_overview_existing,loan_overview_new])
loan_overview_new.to_csv(export_path+'Health&Edc_loanportfolio.txt',index=False)
print('|----Health&Edc_loanportfolio')



##TRANSACTIONS 
Transactions="""
SELECT * FROM (
SELECT DISTINCT T.ACCOUNT_NUMBER,ACCOUNT_NAME,
C.CUSTOMER_ID,SUB_BUSINESS_UNIT_CODE,
BANK_SECTOR_DESCRIPTION,BRANCH_NAME, REGION_NAME,
TRANSACTION_ID,
TRANSACTION_DATE,
YEAR(TRANSACTION_DATE) AS YEAR, 
concat(datename(m,TRANSACTION_DATE),'-',cast(year(TRANSACTION_DATE) as char(4))) AS MONTH,
DEBIT_CREDIT,
SUM(TRANSACTION_AMOUNT_BASE) AS TRAN_AMNT,
TRANSACTION_CURRENCY
FROM TRANSACTIONS T
LEFT OUTER JOIN dimACCOUNTS A ON A.ACCOUNT_NUMBER=T.ACCOUNT_NUMBER
LEFT OUTER JOIN dimCUSTOMERS C ON C.CUSTOMER_ID=A.CUSTOMER_ID
LEFT OUTER JOIN dimSEGMENTS S ON S.SEGMENT_CODE=C.SEGMENT_CODE
LEFT OUTER JOIN dimBANK_SECTORS BB ON BB.BANK_SECTOR_ID=C.INDUSTRY_TYPE
LEFT OUTER JOIN dimBRANCHES B ON B.BRANCH_ID=C.BRANCH_ID
LEFT OUTER JOIN dimREGIONS R ON R.REGION_CODE=B.REGION_CODE
WHERE TRANSACTION_DATE >=  DATEFROMPARTS(YEAR(GETDATE()), 1, 1)
AND TRANSACTION_DATE<= GETDATE()
 -- AND INDUSTRY_TYPE IN ('DF12','DF15')
  --AND TRANSACTION_SUB_TYPE<>'BI'
--WHERE YEAR(TRANSACTION_DATE)  = YEAR(GETDATE())
--AND TRANSACTION_DATE <= GETDATE()
AND NARRATIVE NOT LIKE '%disburs%'
AND NARRATIVE NOT LIKE '%loan%'
AND NARRATIVE NOT LIKE '%fees%'
AND NARRATIVE NOT LIKE '%excise%duty%'
AND NARRATIVE NOT LIKE '%ODCF%'
AND NARRATIVE NOT LIKE '%[%]:%TO%'
AND NARRATIVE NOT LIKE '%INT:%PD%'
AND DELETE_FLAG<>'Y'
AND SUB_BUSINESS_UNIT_CODE<>'CIB'
--AND T.ACCOUNT_NUMBER='01193656700032'
GROUP BY T.ACCOUNT_NUMBER,ACCOUNT_NAME,
C.CUSTOMER_ID,SUB_BUSINESS_UNIT_CODE,
BANK_SECTOR_DESCRIPTION,BRANCH_NAME,
TRANSACTION_DATE,TRANSACTION_ID,REGION_NAME,
DEBIT_CREDIT,TRANSACTION_CURRENCY
)W
PIVOT (
    SUM(TRAN_AMNT)
    FOR DEBIT_CREDIT IN ([D], [C]) 
) AS PivotTable


"""
#Transactions_existing=pd.read_csv(export_path+'Transactions.txt')
Transactions_new=pd.read_sql(Transactions,connection)
#Transactions_final=pd.concat([Transactions_existing,Transactions_new])
Transactions_new.to_csv(export_path+'Transactions.txt',index=False)
##Transactions_new.to_csv(export_path+'Transactions.txt',index=False)
print('|----Transactions')


#QUICKBANKING UTILIZATION 

Quickbanking="""
-----QB utilization in last 3months through transactions Education sector


   SELECT * FROM (
SELECT DISTINCT C.CUSTOMER_ID,CUSTOMER_NAME,CUSTOMER_TYPE,
C.BRANCH_ID,BRANCH_NAME,REGION_NAME,
BANK_SECTOR_DESCRIPTION,INDUSTRY_TYPE
,CASE WHEN C.CUSTOMER_ID =N.CUSTOMER_ID THEN 'YES' ELSE 'NO' END AS QUICK_BANKING_ONBOARDED
,TXN_VALUE,TXN_VOLUME
FROM dimCUSTOMERS C
LEFT OUTER JOIN dimBANK_SECTORS B ON B.BANK_SECTOR_ID=C.INDUSTRY_TYPE
LEFT OUTER JOIN dimBRANCHES BB ON BB.BRANCH_ID=C.BRANCH_ID
LEFT OUTER JOIN dimREGIONS R ON R.REGION_CODE=BB.REGION_CODE
LEFT OUTER JOIN CUSTOMER_DETAILS D ON D.CUSTOMER_ID=C.CUSTOMER_ID
LEFT OUTER JOIN (
SELECT DISTINCT CUSTOMER_ID FROM 
QuickOnBoarding )N ON N.CUSTOMER_ID=C.CUSTOMER_ID
LEFT OUTER JOIN (
SELECT 
Customer_ID,
COUNT(OPERATIOND_ID) AS TXN_VOLUME,
SUM(TRANSACTION_AMOUNT) AS TXN_VALUE
FROM QB_TRANSACTIONS
WHERE Date >= DATEADD(MONTH, -1, DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()), 0))
  AND Date < CAST(GETDATE() AS DATE)
  GROUP BY Customer_ID
 )Q ON Q.CUSTOMER_ID=C.CUSTOMER_ID
WHERE  C.INDUSTRY_TYPE IN (
'DF01'--Agriculture
)
--AND CUSTOMER_TYPE<>1
AND CUSTOMER_NAME NOT LIKE '%INVEST%')QUICKBANKING_UTILIZATION


"""
#Quickbanking_existing=pd.read_csv(export_path+'Quick_utilization.txt')
Quickbanking_new=pd.read_sql(Quickbanking,connection)
#Quickbanking_final=pd.concat([Quickbanking_existing,Quickbanking_new])
Quickbanking_new.to_csv(export_path+'Quick_utilization.txt',index=False)
print('|----Quick_utilization')


#SCHOOLPAY 

# Schoolpay="""
# --school pay utilization last 3 months---

# SELECT  CREDITED_ACCOUNT,
# DEBTED_ACCOUNT,AA.CUSTOMER_ID,
# ACCOUNT_NUMBER,ACCOUNT_NAME,
# COUNT(DISTINCT AGENT_DEP_REF) AS TXN_VOLUME,
# SUM(TRANSACTION_AMOUNT) AS TXN_AMOUNT,
# CAST(PROCESSEDDATE AS DATE) AS PROCESSEDDATE
# FROM AGENT_DEPOSITS A
# LEFT OUTER JOIN dimACCOUNTS AA ON AA.ACCOUNT_NUMBER=A.CREDITED_ACCOUNT
# LEFT OUTER JOIN dimCUSTOMERS C ON C.CUSTOMER_ID=AA.CUSTOMER_ID
# WHERE UTILITYCODE IN ('016','ABSHPAY')
# AND C.INDUSTRY_TYPE IN (
# 'DF12',
# 'DF15')
# --AND CAST(PROCESSEDDATE AS DATE) >'2024-01-01'
# --AND PROCESSEDDATE >= DATEADD(MONTH, -1, DATEADD(DAY, DATEDIFF(DAY, 0, GETDATE()), 0))
# --  AND PROCESSEDDATE < GETDATE()
# AND PROCESSEDDATE >= DATEFROMPARTS(YEAR(GETDATE()), 1, 1) -- Beginning of the current year
#   AND PROCESSEDDATE <= GETDATE()
# GROUP BY CREDITED_ACCOUNT,
# DEBTED_ACCOUNT,
# ACCOUNT_NUMBER,ACCOUNT_NAME,AA.CUSTOMER_ID,PROCESSEDDATE
# --ORDER BY PROCESSEDDATE DESC


# """
# #Schoolpay_existing=pd.read_csv(export_path+'Schoolpay_utilization.txt')
# Schoolpay_new=pd.read_sql(Schoolpay,connection)
# Schoolpay_final=pd.concat([Schoolpay_new,Schoolpay_new])
# Schoolpay_final.to_csv(export_path+'Schoolpay_utilization.txt',index=False)
# print('|----Schoolpay_utilization')

#BANK VIEW

# Bankview="""
# SELECT DISTINCT AA.ACCOUNT_NUMBER,
# AA.CUSTOMER_ID,
# CUSTOMER_NAME,
# AA.ACCOUNT_STATUS,
# BANK_SECTOR_DESCRIPTION,SUB_USER_CLASS_CODE,
# GROSS_BALANCE_BASE, REPORTING_DATE
# FROM ACCOUNT_ACTIVITY AA 
# LEFT OUTER JOIN dimACCOUNTS A ON A.ACCOUNT_NUMBER=AA.ACCOUNT_NUMBER
# LEFT OUTER JOIN dimCUSTOMERS C ON C.CUSTOMER_ID=A.CUSTOMER_ID
# LEFT OUTER JOIN dimBANK_SECTORS S ON S.BANK_SECTOR_ID=C.INDUSTRY_TYPE
# LEFT OUTER JOIN (
# SELECT CUSTOMER_ID,
# SUM(GROSS_BALANCE_BASE) AS GROSS_BALANCE_BASE,
# SUB_USER_CLASS_CODE
# FROM LOAN_LISTING
# WHERE  REPORTING_DATE IN (
#    select distinct EOMONTH(PK_Date) from dimDate where PK_Date between
# DATEADD(yy,0,DATEADD(yy,DATEDIFF(yy,0,GETDATE()),0)) 
# AND DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1))

# GROUP BY CUSTOMER_ID,SUB_USER_CLASS_CODE
# )L ON L.CUSTOMER_ID=A.CUSTOMER_ID
# WHERE AA.REPORTING_DATE IN (
#    select distinct EOMONTH(PK_Date) from dimDate where PK_Date between
# DATEADD(yy,0,DATEADD(yy,DATEDIFF(yy,0,GETDATE()),0)) 
# AND DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1))
# AND AA.CLOSURE_FLAG<>'Y'
# AND A.PRODUCT_CODE<'A'


# """
# Bankview_existing=pd.read_csv(export_path+'Bank_view.txt')
# Bankview_new=pd.read_sql(Bankview,connection)
# Bankview_final=pd.concat([Bankview_existing,Bankview_new])
# Bankview_final.to_csv(export_path+'Bank_view.txt',index=False)
# print('|----Bank_view')


#BANK CUSTOMERS AND ACCOUNTS

Bankview_customers="""
SELECT distinct aa.ACCOUNT_NUMBER ,
AA.CUSTOMER_ID,CUSTOMER_TYPE,
CUSTOMER_NAME,
AA.ACCOUNT_STATUS,
BANK_SECTOR_DESCRIPTION,U.SUB_BUSINESS_UNIT_CODE,
REPORTING_DATE
FROM ACCOUNT_ACTIVITY AA 
LEFT OUTER JOIN dimACCOUNTS A ON A.ACCOUNT_NUMBER=AA.ACCOUNT_NUMBER
LEFT OUTER JOIN dimCUSTOMERS C ON C.CUSTOMER_ID=A.CUSTOMER_ID
LEFT OUTER JOIN dimBANK_SECTORS S ON S.BANK_SECTOR_ID=C.INDUSTRY_TYPE
LEFT OUTER JOIN dimSEGMENTS SS ON SS.SEGMENT_CODE=C.SEGMENT_CODE
LEFT OUTER JOIN dimSUB_BUSINESS_UNITS U ON U.SUB_BUSINESS_UNIT_CODE=SS.SUB_BUSINESS_UNIT_CODE
LEFT OUTER JOIN CUSTOMER_DETAILS D ON D.CUSTOMER_ID=AA.CUSTOMER_ID
WHERE REPORTING_DATE >= DATEADD(DAY, -1, CAST(GETDATE() AS DATE))
  AND REPORTING_DATE < CAST(GETDATE() AS DATE)
  AND AA.CLOSURE_FLAG<>'Y'
AND A.PRODUCT_CODE<'A'

"""
#Bankview_existing=pd.read_csv(export_path+'Bank_view.txt')
Bankview_customers=pd.read_sql(Bankview_customers,connection)
#Bankview_final=pd.concat([Bankview_existing,Bankview_new])
Bankview_customers.to_csv(export_path+'Total bank customers.txt',index=False)
print('|----Bank_view_customers')


#BANK LOAN PORTFOLIO 
Bankloans="""
SELECT ACCOUNT_NUMBER,ACCOUNT_NAME
,L.CUSTOMER_ID,
-1*GROSS_BALANCE_BASE AS GROSS_BALANCE_BASE
,BANK_SECTOR_DESCRIPTION,U.SUB_BUSINESS_UNIT_CODE,
SUB_USER_CLASS_CODE,DAYS_PAST_DUE_COMPUTED,
REPORTING_DATE
FROM LOAN_LISTING L 
LEFT OUTER JOIN dimCUSTOMERS C ON C.CUSTOMER_ID=L.CUSTOMER_ID
LEFT OUTER JOIN dimBANK_SECTORS S ON S.BANK_SECTOR_ID=C.INDUSTRY_TYPE
LEFT OUTER JOIN dimSEGMENTS SS ON SS.SEGMENT_CODE=C.SEGMENT_CODE
LEFT OUTER JOIN dimSUB_BUSINESS_UNITS U ON U.SUB_BUSINESS_UNIT_CODE=SS.SUB_BUSINESS_UNIT_CODE

WHERE REPORTING_DATE>= DATEADD(DAY, -1, CAST(GETDATE() AS DATE))
  AND REPORTING_DATE < CAST(GETDATE() AS DATE)

"""
#Bankview_existing=pd.read_csv(export_path+'Bank_view.txt')
Bankloans=pd.read_sql(Bankloans,connection)
#Bankview_final=pd.concat([Bankview_existing,Bankview_new])
Bankloans.to_csv(export_path+'Total bank loans.txt',index=False)
print('|----Total bank loans')

#AVERAGE BLANCES FOR SCHOOLS
# Schoolbalances="""

#  WITH BalanceChanges AS (
#     SELECT 
#         ACCOUNT_NUMBER,ACCOUNT_NAME,D.CUSTOMER_ID,
#         REPORTING_DATE,
#         CLEARED_BALANCE_BASE,BRANCH_NAME,REGION_NAME,
#         LAG(CLEARED_BALANCE_BASE) OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS PREV_BALANCE,
#         LEAD(CLEARED_BALANCE_BASE) OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS NEXT_BALANCE
		
#     FROM 
#         DEPOSIT_LISTING D
# 		LEFT OUTER JOIN dimCUSTOMERS C ON C.CUSTOMER_ID=D.CUSTOMER_ID
# 		LEFT OUTER JOIN CUSTOMER_DETAILS CD ON CD.CUSTOMER_ID=D.CUSTOMER_ID
# 		LEFT OUTER JOIN dimBRANCHES B ON B.BRANCH_ID=D.BRANCH_ID
# 		LEFT OUTER JOIN dimREGIONS R ON R.REGION_CODE=B.REGION_CODE
#     WHERE 
#         REPORTING_DATE >= DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0) -- First day of current month
# AND REPORTING_DATE <= GETDATE()--CURRENT DATE
# 		--AND ACCOUNT_NUMBER='01011027547175'
# 		AND INDUSTRY_TYPE='DF01'
# 		AND CUSTOMER_TYPE<>0
# 		AND ACCOUNT_NAME NOT LIKE'%INVEST%'
# 		--AND ACCOUNT_NUMBER='01011027547175'
# )
# ,CTE2 AS (
# SELECT ACCOUNT_NUMBER,ACCOUNT_NAME,
# BRANCH_NAME,REGION_NAME,
# REPORTING_DATE,CLEARED_BALANCE_BASE
# ,PREV_BALANCE,NEXT_BALANCE
# ,ISNULL(CLEARED_BALANCE_BASE-PREV_BALANCE,0) AS BALANCE_CHANGE
# ,ROW_NUMBER() OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS DAY_COUNT
# --,PREV_DATE,NEXT_DATE
# FROM BalanceChanges)

# ,AVERAGE_BALANCE AS (
# SELECT 
#  --   ACCOUNT_NUMBER,
# 	ACCOUNT_NAME,BRANCH_NAME,REGION_NAME,
#     DATEADD(MONTH, DATEDIFF(MONTH, 0, REPORTING_DATE), 0) AS MonthStart,
#     AVG(CLEARED_BALANCE_BASE) AS AverageBalance
# FROM 
#     CTE2
# WHERE 
#     REPORTING_DATE >= DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) -- Beginning of current month
#     AND REPORTING_DATE < DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) + 1, 0) -- Beginning of next month
# 	--AND ACCOUNT_NUMBER='01011027547175'
# GROUP BY 
#   -- ACCOUNT_NUMBER, 
#    ACCOUNT_NAME,BRANCH_NAME,REGION_NAME,
#     DATEADD(MONTH, DATEDIFF(MONTH, 0, REPORTING_DATE), 0))
# 	SELECT * FROM AVERAGE_BALANCE
# 	--WHERE  ACCOUNT_NAME LIKE '%TAIBAH INTERNATIONAL SCHOOL LTD%'
# 	ORDER BY AverageBalance DESC


# """
# #Bankview_existing=pd.read_csv(export_path+'Bank_view.txt')
# Schoolbalances=pd.read_sql(Schoolbalances,connection)
# #Bankview_final=pd.concat([Bankview_existing,Bankview_new])
# Schoolbalances.to_csv(export_path+'Average school balances.txt',index=False)
# print('|----Average school balances')

# #AVERAGE NUMBER OF DAYS MONEY REMAINS ON AN ACCOUNT-PREVIOUS MONTH

# Schoolwithdrawals="""
# WITH BalanceChanges AS (
#     SELECT 
#         ACCOUNT_NUMBER,
# 		ACCOUNT_NAME,D.CUSTOMER_ID,
#         REPORTING_DATE,
#         CLEARED_BALANCE_BASE,BRANCH_NAME,REGION_NAME,
#         LAG(CLEARED_BALANCE_BASE) OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS PREV_BALANCE,
#         LEAD(CLEARED_BALANCE_BASE) OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS NEXT_BALANCE
		
#     FROM 
#         DEPOSIT_LISTING D
# 		LEFT OUTER JOIN dimCUSTOMERS C ON C.CUSTOMER_ID=D.CUSTOMER_ID
# 		LEFT OUTER JOIN CUSTOMER_DETAILS CD ON CD.CUSTOMER_ID=D.CUSTOMER_ID
# 		LEFT OUTER JOIN dimBRANCHES B ON B.BRANCH_ID=C.BRANCH_ID
# 		LEFT OUTER JOIN dimREGIONS R ON R.REGION_CODE=B.REGION_CODE
#     WHERE 
#   --      REPORTING_DATE >= DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0) -- First day of current month
# 		--AND REPORTING_DATE <= GETDATE()--CURRENT DATE
# 		DATEPART(MONTH, REPORTING_DATE) = DATEPART(MONTH, DATEADD(MONTH, -1, GETDATE()))
# 		AND DATEPART(YEAR, REPORTING_DATE) = DATEPART(YEAR, DATEADD(MONTH, -1, GETDATE()))
# 		--AND ACCOUNT_NUMBER='01011027547175'
# 		AND INDUSTRY_TYPE='DF12'
# 		AND CUSTOMER_TYPE<>0
# 		AND ACCOUNT_NAME NOT LIKE'%INVEST%'
# )
# ,CTE2 AS (
# SELECT ACCOUNT_NUMBER,ACCOUNT_NAME,CUSTOMER_ID,
# BRANCH_NAME,REGION_NAME,
# REPORTING_DATE,CLEARED_BALANCE_BASE
# ,PREV_BALANCE,NEXT_BALANCE
# ,ISNULL(CLEARED_BALANCE_BASE-PREV_BALANCE,0) AS BALANCE_CHANGE
# ,ROW_NUMBER() OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS DAY_COUNT
# --,PREV_DATE,NEXT_DATE
# FROM BalanceChanges),

#  NegativeBalances AS (
#     SELECT 
#         REPORTING_DATE,CUSTOMER_ID,
# 		ACCOUNT_NUMBER,ACCOUNT_NAME,BRANCH_NAME,REGION_NAME,
#         CLEARED_BALANCE_BASE
# 		,PREV_BALANCE,NEXT_BALANCE,
# 		BALANCE_CHANGE,DAY_COUNT,
	
#         LAG(REPORTING_DATE) OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS PREVIOUS_DEBIT_DATE,
#         LAG(BALANCE_CHANGE) OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS PREVIOUS_DEBIT
#     FROM 
#       CTE2
#     WHERE 
#      BALANCE_CHANGE < 0
# )
# ,CTE3 AS (
# SELECT *,
#     DATEDIFF(day, PREVIOUS_DEBIT_DATE, REPORTING_DATE) AS DAYS_DIFFERENCE
# 	,COALESCE( DATEDIFF(day, PREVIOUS_DEBIT_DATE, REPORTING_DATE),DAY_COUNT-1) AS DD
# FROM 
#     NegativeBalances
# 	)
# --SELECT * FROM CTE3
# --WHERE  ACCOUNT_NAME ='VIVA ACADEMY LIMITED'
# ,CTE4 AS (
# 	SELECT --ACCOUNT_NUMBER,
# 	ACCOUNT_NAME,BRANCH_NAME,REGION_NAME,CUSTOMER_ID,
# 	-1*AVG(BALANCE_CHANGE) AS AVGWITHDRAW,
# 	DATEADD(MONTH, DATEDIFF(MONTH, 0, REPORTING_DATE), 0) AS MonthStart,
# 	AVG(DD) AS AVGDAYS
# 	,COUNT(DAY_COUNT) AS NUMBER_OF_WITHDRWALS
# 	FROM CTE3
# 	WHERE 
# 	--REPORTING_DATE >= DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) -- Beginning of current month
#  --   AND REPORTING_DATE < DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) + 1, 0) -- Beginning of next month
# 		DATEPART(MONTH, REPORTING_DATE) = DATEPART(MONTH, DATEADD(MONTH, -1, GETDATE()))
# 		AND DATEPART(YEAR, REPORTING_DATE) = DATEPART(YEAR, DATEADD(MONTH, -1, GETDATE()))
# 	--AND ACCOUNT_NAME = 'VIVA ACADEMY LIMITED'
# 	GROUP BY BRANCH_NAME,REGION_NAME,CUSTOMER_ID,
# 	ACCOUNT_NAME,DATEADD(MONTH, DATEDIFF(MONTH, 0, REPORTING_DATE), 0) 

# 	)
# 	,CTE5 AS (
# 	SELECT CTE4.ACCOUNT_NAME,CUSTOMER_ID,
# 	BRANCH_NAME,REGION_NAME
# 	,AVGWITHDRAW,MonthStart,AVGDAYS
# 	,NUMBER_OF_WITHDRWALS,
# 	CLEARED_BALANCE_BASE
# 	FROM CTE4
# 	LEFT OUTER JOIN (SELECT ACCOUNT_NAME,
# SUM(CLEARED_BALANCE_BASE) AS CLEARED_BALANCE_BASE
# FROM (
# SELECT ACCOUNT_NUMBER,
# ACCOUNT_NAME,
# SUM(CLEARED_BALANCE_BASE) AS CLEARED_BALANCE_BASE
# FROM DEPOSIT_LISTING
# WHERE  REPORTING_DATE= EOMONTH(GETDATE(), -1)
# GROUP BY ACCOUNT_NUMBER,ACCOUNT_NAME)L
# GROUP BY ACCOUNT_NAME)X ON X.ACCOUNT_NAME=CTE4.ACCOUNT_NAME
# ) 
# ,CTE6 AS (
# SELECT ACCOUNT_NUMBER,ACCOUNT_NAME,
# BRANCH_NAME,REGION_NAME,
# REPORTING_DATE,CLEARED_BALANCE_BASE
# ,PREV_BALANCE,NEXT_BALANCE
# ,ISNULL(CLEARED_BALANCE_BASE-PREV_BALANCE,0) AS BALANCE_CHANGE
# ,ROW_NUMBER() OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS DAY_COUNT
# --,PREV_DATE,NEXT_DATE
# FROM BalanceChanges)

# ,AVERAGE_BALANCE AS (
# SELECT 
# 	ACCOUNT_NAME,BRANCH_NAME,REGION_NAME,
#     DATEADD(MONTH, DATEDIFF(MONTH, 0, REPORTING_DATE), 0) AS MonthStart,
#     AVG(CLEARED_BALANCE_BASE) AS AverageBalance
# FROM 
#     CTE6
# WHERE 
 
# 	DATEPART(MONTH, REPORTING_DATE) = DATEPART(MONTH, DATEADD(MONTH, -1, GETDATE()))
# 	AND DATEPART(YEAR, REPORTING_DATE) = DATEPART(YEAR, DATEADD(MONTH, -1, GETDATE()))
# GROUP BY 
#    ACCOUNT_NAME,BRANCH_NAME,REGION_NAME,
#     DATEADD(MONTH, DATEDIFF(MONTH, 0, REPORTING_DATE), 0))
# ,CTE7 AS (	SELECT * FROM AVERAGE_BALANCE
	
# 	)
# SELECT CTE5.ACCOUNT_NAME,CTE5.CUSTOMER_ID,
# CTE5.BRANCH_NAME,CTE5.REGION_NAME,
# AVGWITHDRAW,
# AVGDAYS,NUMBER_OF_WITHDRWALS,CLEARED_BALANCE_BASE,AVERAGEBALANCE
# FROM CTE5
# LEFT OUTER JOIN AVERAGE_BALANCE ON AVERAGE_BALANCE.ACCOUNT_NAME=CTE5.ACCOUNT_NAME AND AVERAGE_BALANCE.BRANCH_NAME=CTE5.BRANCH_NAME


# """
# #Bankview_existing=pd.read_csv(export_path+'Bank_view.txt')
# Schoolwithdrawals=pd.read_sql(Schoolwithdrawals,connection)
# #Bankview_final=pd.concat([Bankview_existing,Bankview_new])
# Schoolwithdrawals.to_csv(export_path+'Avg balance days.txt',index=False)
# print('|----Avg balance days')

# #AVERAGE NUMBER OF DAYS MONEY REMAINS ON AN ACCOUNT-CURRENT MONTH

# Schoolwithdrawalscurrent="""
# WITH BalanceChanges AS (
#     SELECT 
#         ACCOUNT_NUMBER,
# 		ACCOUNT_NAME,D.CUSTOMER_ID,
#         REPORTING_DATE,
#         CLEARED_BALANCE_BASE,BRANCH_NAME,REGION_NAME,
#         LAG(CLEARED_BALANCE_BASE) OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS PREV_BALANCE,
#         LEAD(CLEARED_BALANCE_BASE) OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS NEXT_BALANCE
		
#     FROM 
#         DEPOSIT_LISTING D
# 		LEFT OUTER JOIN dimCUSTOMERS C ON C.CUSTOMER_ID=D.CUSTOMER_ID
# 		LEFT OUTER JOIN CUSTOMER_DETAILS CD ON CD.CUSTOMER_ID=D.CUSTOMER_ID
# 		LEFT OUTER JOIN dimBRANCHES B ON B.BRANCH_ID=C.BRANCH_ID
# 		LEFT OUTER JOIN dimREGIONS R ON R.REGION_CODE=B.REGION_CODE
#     WHERE 
#         REPORTING_DATE >= DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0) -- First day of current month
# 		AND REPORTING_DATE <= GETDATE()--CURRENT DATE
# 		AND INDUSTRY_TYPE='DF12'
# 		AND CUSTOMER_TYPE<>0
# 		AND ACCOUNT_NAME NOT LIKE'%INVEST%'
# )
# ,CTE2 AS (
# SELECT ACCOUNT_NUMBER,ACCOUNT_NAME,CUSTOMER_ID,
# BRANCH_NAME,REGION_NAME,
# REPORTING_DATE,CLEARED_BALANCE_BASE
# ,PREV_BALANCE,NEXT_BALANCE
# ,ISNULL(CLEARED_BALANCE_BASE-PREV_BALANCE,0) AS BALANCE_CHANGE
# ,ROW_NUMBER() OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS DAY_COUNT
# --,PREV_DATE,NEXT_DATE
# FROM BalanceChanges),

#  NegativeBalances AS (
#     SELECT 
#         REPORTING_DATE,CUSTOMER_ID,
# 		ACCOUNT_NUMBER,ACCOUNT_NAME,BRANCH_NAME,REGION_NAME,
#         CLEARED_BALANCE_BASE
# 		,PREV_BALANCE,NEXT_BALANCE,
# 		BALANCE_CHANGE,DAY_COUNT,
	
#         LAG(REPORTING_DATE) OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS PREVIOUS_DEBIT_DATE,
#         LAG(BALANCE_CHANGE) OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS PREVIOUS_DEBIT
#     FROM 
#       CTE2
#     WHERE 
#      BALANCE_CHANGE < 0
# )
# ,CTE3 AS (
# SELECT *,
#     DATEDIFF(day, PREVIOUS_DEBIT_DATE, REPORTING_DATE) AS DAYS_DIFFERENCE
# 	,COALESCE( DATEDIFF(day, PREVIOUS_DEBIT_DATE, REPORTING_DATE),DAY_COUNT-1) AS DD
# FROM 
#     NegativeBalances
# 	)
# --SELECT * FROM CTE3
# --WHERE  ACCOUNT_NAME ='VIVA ACADEMY LIMITED'
# ,CTE4 AS (
# 	SELECT --ACCOUNT_NUMBER,
# 	ACCOUNT_NAME,BRANCH_NAME,REGION_NAME,CUSTOMER_ID,
# 	-1*AVG(BALANCE_CHANGE) AS AVGWITHDRAW,
# 	DATEADD(MONTH, DATEDIFF(MONTH, 0, REPORTING_DATE), 0) AS MonthStart,
# 	AVG(DD) AS AVGDAYS
# 	,COUNT(DAY_COUNT) AS NUMBER_OF_WITHDRWALS
# 	FROM CTE3
# 	WHERE 
# 	REPORTING_DATE >= DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) -- Beginning of current month
#     AND REPORTING_DATE < DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) + 1, 0) -- Beginning of next month
# 	--AND ACCOUNT_NAME = 'VIVA ACADEMY LIMITED'
# 	GROUP BY BRANCH_NAME,REGION_NAME,CUSTOMER_ID,
# 	ACCOUNT_NAME,DATEADD(MONTH, DATEDIFF(MONTH, 0, REPORTING_DATE), 0) 

# 	)
# 	,CTE5 AS (
# 	SELECT CTE4.ACCOUNT_NAME,CUSTOMER_ID,
# 	BRANCH_NAME,REGION_NAME
# 	,AVGWITHDRAW,MonthStart,AVGDAYS
# 	,NUMBER_OF_WITHDRWALS,
# 	CLEARED_BALANCE_BASE
# 	FROM CTE4
# 	LEFT OUTER JOIN (SELECT ACCOUNT_NAME,
# SUM(CLEARED_BALANCE_BASE) AS CLEARED_BALANCE_BASE
# FROM (
# SELECT ACCOUNT_NUMBER,
# ACCOUNT_NAME,
# SUM(CLEARED_BALANCE_BASE) AS CLEARED_BALANCE_BASE
# FROM DEPOSIT_LISTING
# WHERE  REPORTING_DATE= (SELECT MAX(REPORTING_DATE) FROM DEPOSIT_LISTING)
# GROUP BY ACCOUNT_NUMBER,ACCOUNT_NAME)L
# GROUP BY ACCOUNT_NAME)X ON X.ACCOUNT_NAME=CTE4.ACCOUNT_NAME
# ) 
# ,CTE6 AS (
# SELECT ACCOUNT_NUMBER,ACCOUNT_NAME,
# BRANCH_NAME,REGION_NAME,
# REPORTING_DATE,CLEARED_BALANCE_BASE
# ,PREV_BALANCE,NEXT_BALANCE
# ,ISNULL(CLEARED_BALANCE_BASE-PREV_BALANCE,0) AS BALANCE_CHANGE
# ,ROW_NUMBER() OVER (PARTITION BY ACCOUNT_NUMBER ORDER BY REPORTING_DATE) AS DAY_COUNT
# --,PREV_DATE,NEXT_DATE
# FROM BalanceChanges)

# ,AVERAGE_BALANCE AS (
# SELECT 
# 	ACCOUNT_NAME,BRANCH_NAME,REGION_NAME,
#     DATEADD(MONTH, DATEDIFF(MONTH, 0, REPORTING_DATE), 0) AS MonthStart,
#     AVG(CLEARED_BALANCE_BASE) AS AverageBalance
# FROM 
#     CTE6
# WHERE 
#     REPORTING_DATE >= DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0) -- Beginning of current month
#     AND REPORTING_DATE < DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) + 1, 0) -- Beginning of next month

# GROUP BY 
#    ACCOUNT_NAME,BRANCH_NAME,REGION_NAME,
#     DATEADD(MONTH, DATEDIFF(MONTH, 0, REPORTING_DATE), 0))
# ,CTE7 AS (	SELECT * FROM AVERAGE_BALANCE

# 	)
# SELECT CTE5.ACCOUNT_NAME,CTE5.CUSTOMER_ID,
# CTE5.BRANCH_NAME,CTE5.REGION_NAME,
# AVGWITHDRAW,
# AVGDAYS,NUMBER_OF_WITHDRWALS,CLEARED_BALANCE_BASE,AVERAGEBALANCE
# FROM CTE5
# LEFT OUTER JOIN AVERAGE_BALANCE ON AVERAGE_BALANCE.ACCOUNT_NAME=CTE5.ACCOUNT_NAME AND AVERAGE_BALANCE.BRANCH_NAME=CTE5.BRANCH_NAME
# --WHERE  CTE5.ACCOUNT_NAME = 'VIVA ACADEMY LIMITED'

# """
# #Bankview_existing=pd.read_csv(export_path+'Bank_view.txt')
# Schoolwithdrawals=pd.read_sql(Schoolwithdrawalscurrent,connection)
# #Bankview_final=pd.concat([Bankview_existing,Bankview_new])
# Schoolwithdrawals.to_csv(export_path+'Avg balance days current month.txt',index=False)
# print('|----Avg balance days current month')

#NFI QUERY FOR CURRENT YEAR

NFI_query="""
SELECT A.CUSTOMER_ID, CUSTOMER_NAME, SUB_BUSINESS_UNIT_CODE, C.RELATIONSHIP_MANAGER,CHARGE_DATE,   SUM(CHARGE_AMOUNT_BASE) NFI
FROM CUSTOMERS_CHARGES CC
LEFT OUTER JOIN DIMACCOUNTS A ON CC.ACCOUNT_NUMBER = A.ACCOUNT_NUMBER
LEFT OUTER JOIN DASH20_STG..dimCUSTOMERS C ON A.CUSTOMER_ID = C.CUSTOMER_ID
LEFT OUTER JOIN DIMSEGMENTS G ON C.SEGMENT_CODE = G.SEGMENT_CODE


--WHERE CHARGE_DATE BETWEEN '01-MAR-2024' AND '31-MAR-2024'

WHERE CHARGE_DATE BETWEEN convert (date,DATEADD(YEAR,DATEDIFF(YEAR,0,GETDATE()),0))
AND convert (date,DATEADD(YEAR, DATEDIFF(YEAR,0,GETDATE()) + 1, -1)) 
AND SUB_BUSINESS_UNIT_CODE <> 'CIB'
AND INDUSTRY_TYPE='DF01'
GROUP BY A.CUSTOMER_ID, CUSTOMER_NAME, SUB_BUSINESS_UNIT_CODE, C.RELATIONSHIP_MANAGER,CHARGE_DATE

"""
#Bankview_existing=pd.read_csv(export_path+'Bank_view.txt')
NFI=pd.read_sql(NFI_query,connection)
#Bankview_final=pd.concat([Bankview_existing,Bankview_new])
NFI.to_csv(export_path+'NFI.txt',index=False)
print('|----NFI data')


# GUARANTEES AND LINE FUNDING
GUARANTEES_query="""
SELECT L.ACCOUNT_NUMBER, ACCOUNT_NAME, DISBURSEMENT_AMOUNT_BASE, DISBURSEMENT_DATE, REPORTING_DATE
, -GROSS_BALANCE_BASE AS EXPOSURE,F.LINE_OF_FUNDING_DESCRIPTION,GUARANTEE_COVER_CODE, TYPE_OF_ADVANCE_ID 
, B.BOU_SECTOR_DESCRIPTION, BOU_SUB_SECTOR_DESCRIPTION, S.BANK_SECTOR_DESCRIPTION, PRODUCT_GROUP_DESCRIPTION, L.INTEREST_RATE , 'GUARANTEE' AS STATE

FROM LOAN_LISTING L
LEFT OUTER JOIN dimBOU_SECTORS B ON B.BOU_SECTOR_CODE = L.BOU_SECTOR_CODE
LEFT OUTER JOIN dimCUSTOMERS C ON C.CUSTOMER_ID = L.CUSTOMER_ID
LEFT OUTER JOIN  dimBANK_SECTORS S ON S.BANK_SECTOR_ID = C.INDUSTRY_TYPE
LEFT OUTER JOIN dimSEGMENTS SG ON SG.SEGMENT_CODE = C.SEGMENT_CODE
LEFT OUTER JOIN dimPRODUCTS P ON P.PRODUCT_CODE = L.PRODUCT_CODE
LEFT OUTER JOIN dimLINE_OF_FUNDING F ON F.LINE_OF_FUNDING_ID = L.LINE_OF_FUNDING_ID
LEFT OUTER  JOIN dimBOU_SUB_SECTORS BS ON BS.BOU_SUB_SECTOR_CODE = L.BOU_SUB_SECTOR_CODE
LEFT OUTER JOIN dimPRODUCT_GROUPS PG ON PG.PRODUCT_GROUP_ID = P.PRODUCT_GROUP_ID

WHERE REPORTING_DATE IN (
   select distinct EOMONTH(PK_Date) from dimDate where PK_Date between
DATEADD(yy,0,DATEADD(yy,DATEDIFF(yy,0,GETDATE()),0)) 
AND DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1))
AND GUARANTEE_COVER_CODE IN ('ABI T',
'ACELI',
'AGRIC',
'USAID')
AND SUB_BUSINESS_UNIT_CODE <> 'CIB'

UNION ---- LINE OF FUNDING
SELECT L.ACCOUNT_NUMBER, ACCOUNT_NAME, DISBURSEMENT_AMOUNT_BASE, DISBURSEMENT_DATE, REPORTING_DATE
, -GROSS_BALANCE_BASE AS EXPOSURE,F.LINE_OF_FUNDING_DESCRIPTION,GUARANTEE_COVER_CODE, TYPE_OF_ADVANCE_ID 
, B.BOU_SECTOR_DESCRIPTION, BOU_SUB_SECTOR_DESCRIPTION, S.BANK_SECTOR_DESCRIPTION, PRODUCT_GROUP_DESCRIPTION, l.INTEREST_RATE, 'LINE OF FUNDING' AS STATE
FROM LOAN_LISTING L
LEFT OUTER JOIN dimBOU_SECTORS B ON B.BOU_SECTOR_CODE = L.BOU_SECTOR_CODE
LEFT OUTER JOIN dimCUSTOMERS C ON C.CUSTOMER_ID = L.CUSTOMER_ID
LEFT OUTER JOIN  dimBANK_SECTORS S ON S.BANK_SECTOR_ID = C.INDUSTRY_TYPE
LEFT OUTER JOIN dimSEGMENTS SG ON SG.SEGMENT_CODE = C.SEGMENT_CODE
LEFT OUTER JOIN dimPRODUCTS P ON P.PRODUCT_CODE = L.PRODUCT_CODE
LEFT OUTER JOIN dimLINE_OF_FUNDING F ON F.LINE_OF_FUNDING_ID = L.LINE_OF_FUNDING_ID
LEFT OUTER  JOIN dimBOU_SUB_SECTORS BS ON BS.BOU_SUB_SECTOR_CODE = L.BOU_SUB_SECTOR_CODE
LEFT OUTER JOIN dimPRODUCT_GROUPS PG ON PG.PRODUCT_GROUP_ID = P.PRODUCT_GROUP_ID

WHERE REPORTING_DATE IN (
   select distinct EOMONTH(PK_Date) from dimDate where PK_Date between
DATEADD(yy,0,DATEADD(yy,DATEDIFF(yy,0,GETDATE()),0)) 
AND DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 1, -1))

AND F.LINE_OF_FUNDING_DESCRIPTION IN ('ABI FINANCE',
'ACELI AFRICA',
'BOU/ACF & DFCU',
'DFCU & GOU')
AND SUB_BUSINESS_UNIT_CODE <> 'CIB'
"""
#Bankview_existing=pd.read_csv(export_path+'Bank_view.txt')
GUARANTEES=pd.read_sql(GUARANTEES_query,connection)
#Bankview_final=pd.concat([Bankview_existing,Bankview_new])
GUARANTEES.to_csv(export_path+'GUARANTEES.txt',index=False)
print('|----GUARANTEES data')


NPA_PAR_query="""
SELECT 
MONTH(Z.REPORTING_DATE) MONTH_, BANK_SECTOR_GROUP_DESCRIPTION

,SUM(CASE WHEN DESCRIPTION = 'PAR' THEN BALANCE ELSE 0 END)/ NULLIF(SUM(CASE WHEN DESCRIPTION = 'LOANS' 
THEN BALANCE ELSE 0 END),0) AS PAR
,SUM(CASE WHEN DESCRIPTION = 'NPA' THEN BALANCE ELSE 0 END)/ NULLIF(SUM(CASE WHEN DESCRIPTION = 'LOANS' 
THEN BALANCE ELSE 0 END),0) AS NPA
 FROM (
 SELECT REPORTING_DATE, S.SUB_BUSINESS_UNIT_CODE, C.RELATIONSHIP_MANAGER, G.BANK_SECTOR_GROUP_DESCRIPTION

,CASE WHEN CURRENCY_CODE = 'UGX' THEN 'LCY' ELSE 'FCY' END AS CRNCY
,SUM(BALANCE) AS BALANCE
,'LOANS' [DESCRIPTION] FROM
(
    SELECT CUSTOMER_ID, REPORTING_DATE, CURRENCY_CODE, 
    -GROSS_BALANCE_BASE AS BALANCE
    FROM LOAN_LISTING L     
    UNION ALL     
 SELECT CUSTOMER_ID, REPORTING_DATE, CURRENCY_CODE, 
    -(CASE WHEN GROSS_BALANCE_BASE >0 THEN 0 ELSE GROSS_BALANCE_BASE END) AS BALANCE
    FROM LIMITS OD
) AL
LEFT OUTER JOIN DASH20_STG..dimCUSTOMERS C ON AL.CUSTOMER_ID = C.CUSTOMER_ID
LEFT OUTER JOIN dimSEGMENTS S ON S.SEGMENT_CODE = C.SEGMENT_CODE
LEFT OUTER JOIN dimBANK_SECTORS B ON B.BANK_SECTOR_ID = C.INDUSTRY_TYPE
LEFT OUTER JOIN BANK_SECTOR_GROUPS G ON G.BANK_SECTOR_ID = B.BANK_SECTOR_ID

--WHERE (REPORTING_DATE = @TO_DATE)

WHERE REPORTING_DATE>= DATEADD(DAY, -1, CAST(GETDATE() AS DATE))
  AND REPORTING_DATE < CAST(GETDATE() AS DATE)

AND SUB_BUSINESS_UNIT_CODE  NOT IN ( 'CIB')
 GROUP BY 
REPORTING_DATE , S.SUB_BUSINESS_UNIT_CODE, C.RELATIONSHIP_MANAGER, G.BANK_SECTOR_GROUP_DESCRIPTION

,CASE WHEN CURRENCY_CODE = 'UGX' THEN 'LCY' ELSE 'FCY' END 
UNION ALL ---PAR----------------------------------------------------------------------------
SELECT REPORTING_DATE , S.SUB_BUSINESS_UNIT_CODE, C.RELATIONSHIP_MANAGER, G.BANK_SECTOR_GROUP_DESCRIPTION

,CASE WHEN CURRENCY_CODE = 'UGX' THEN 'LCY' ELSE 'FCY' END AS CRNCY
,SUM(BALANCE) AS BALANCE
,'PAR' [DESCRIPTION] FROM
(
    SELECT CUSTOMER_ID, REPORTING_DATE, CURRENCY_CODE, 
    -GROSS_BALANCE_BASE AS BALANCE
    FROM LOAN_LISTING L 
    WHERE SUB_USER_CLASS_CODE <> 'STD'     UNION ALL     SELECT CUSTOMER_ID, REPORTING_DATE, CURRENCY_CODE, 
    -(CASE WHEN GROSS_BALANCE_BASE >0 THEN 0 ELSE GROSS_BALANCE_BASE END) AS BALANCE
    FROM LIMITS OD 
    WHERE SUB_USER_CLASS_CODE <> 'STD' )
AL LEFT OUTER JOIN DASH20_STG..dimCUSTOMERS C ON AL.CUSTOMER_ID = C.CUSTOMER_ID
LEFT OUTER JOIN dimSEGMENTS S ON S.SEGMENT_CODE = C.SEGMENT_CODE
LEFT OUTER JOIN dimBANK_SECTORS B ON B.BANK_SECTOR_ID = C.INDUSTRY_TYPE
LEFT OUTER JOIN BANK_SECTOR_GROUPS G ON G.BANK_SECTOR_ID = B.BANK_SECTOR_ID

--WHERE (REPORTING_DATE = @TO_DATE)


WHERE REPORTING_DATE>= DATEADD(DAY, -1, CAST(GETDATE() AS DATE))
  AND REPORTING_DATE < CAST(GETDATE() AS DATE)

AND SUB_BUSINESS_UNIT_CODE  NOT IN ( 'CIB')
GROUP BY 
REPORTING_DATE , S.SUB_BUSINESS_UNIT_CODE, C.RELATIONSHIP_MANAGER, G.BANK_SECTOR_GROUP_DESCRIPTION

,CASE WHEN CURRENCY_CODE = 'UGX' THEN 'LCY' ELSE 'FCY' END 
UNION ALL --NPA---------------------------------------------------------------- 
SELECT REPORTING_DATE , S.SUB_BUSINESS_UNIT_CODE, C.RELATIONSHIP_MANAGER, G.BANK_SECTOR_GROUP_DESCRIPTION

,CASE WHEN CURRENCY_CODE = 'UGX' THEN 'LCY' ELSE 'FCY' END AS CRNCY
,SUM(BALANCE) AS BALANCE
,'NPA' [DESCRIPTION] FROM
(
    SELECT CUSTOMER_ID, REPORTING_DATE, CURRENCY_CODE, 
    -GROSS_BALANCE_BASE AS BALANCE
    FROM LOAN_LISTING L 
    WHERE MAIN_USER_CLASS_CODE = 'NPA'   
     UNION ALL     
  SELECT CUSTOMER_ID, REPORTING_DATE, CURRENCY_CODE, 
    -(CASE WHEN GROSS_BALANCE_BASE >0 THEN 0 ELSE GROSS_BALANCE_BASE END) AS BALANCE
    FROM LIMITS OD 
    WHERE MAIN_USER_CLASS_CODE = 'NPA' ) AL 
LEFT OUTER JOIN DASH20_STG..dimCUSTOMERS C ON AL.CUSTOMER_ID = C.CUSTOMER_ID
LEFT OUTER JOIN dimSEGMENTS S ON S.SEGMENT_CODE = C.SEGMENT_CODE
LEFT OUTER JOIN dimBANK_SECTORS B ON B.BANK_SECTOR_ID = C.INDUSTRY_TYPE
LEFT OUTER JOIN BANK_SECTOR_GROUPS G ON G.BANK_SECTOR_ID = B.BANK_SECTOR_ID

WHERE REPORTING_DATE>= DATEADD(DAY, -1, CAST(GETDATE() AS DATE))
  AND REPORTING_DATE < CAST(GETDATE() AS DATE)
AND SUB_BUSINESS_UNIT_CODE  NOT IN ( 'CIB')
GROUP BY 
REPORTING_DATE , S.SUB_BUSINESS_UNIT_CODE, C.RELATIONSHIP_MANAGER, G.BANK_SECTOR_GROUP_DESCRIPTION

,CASE WHEN CURRENCY_CODE = 'UGX' THEN 'LCY' ELSE 'FCY' END ) Z
WHERE BANK_SECTOR_GROUP_DESCRIPTION = 'AGRICULTURE'

 GROUP BY MONTH(Z.REPORTING_DATE), BANK_SECTOR_GROUP_DESCRIPTION 
"""
#Bankview_existing=pd.read_csv(export_path+'Bank_view.txt')
NPA_PAR=pd.read_sql(NPA_PAR_query,connection)
#Bankview_final=pd.concat([Bankview_existing,Bankview_new])
NPA_PAR.to_csv(export_path+'NPA_PAR.txt',index=False)
print('|----NPA_PAR data')



# DISBURSED LOANS

DISBURSED_LOANS_query="""

--LOANS_DISBURSED
 
SELECT 
MONTH(ACCOUNT_OPEN_DATE)MTH,
COUNT(DISTINCT ACCOUNT_NUMBER)VOLUME, 
SUM(OPENING_BALANCE_BASE) DISBURSED_AMOUNT, 'MTD' AS PERIOD
FROM (

SELECT AA.ACCOUNT_NUMBER, C.SEGMENT_CODE,
OPENING_BALANCE_BASE, AA.ACCOUNT_OPEN_DATE,SUB_BUSINESS_UNIT_CODE AS BIZ_UNIT
FROM NEW_BUSINESS AA
LEFT OUTER JOIN dimCUSTOMERS C ON AA.CUSTOMER_ID = C.CUSTOMER_ID
LEFT OUTER JOIN DIMACCOUNTS A ON AA.ACCOUNT_NUMBER = A.ACCOUNT_NUMBER
LEFT OUTER JOIN DIMBRANCHES B ON AA.BRANCH_ID = B.BRANCH_ID
LEFT OUTER JOIN dimREGIONS R ON B.REGION_CODE = R.REGION_CODE
LEFT OUTER JOIN DIMPRODUCTS P ON AA.PRODUCT_CODE = P.PRODUCT_CODE
LEFT OUTER JOIN dimPRODUCT_GROUPS PG ON P.PRODUCT_GROUP_ID = PG.PRODUCT_GROUP_ID
LEFT OUTER JOIN dimSEGMENTS SG ON SG.SEGMENT_CODE=C.SEGMENT_CODE
LEFT OUTER JOIN LOAN_LISTING L ON L.ACCOUNT_NUMBER=AA.ACCOUNT_NUMBER

 
WHERE AA.REPORTING_DATE = (SELECT MAX(REPORTING_DATE) FROM NEW_BUSINESS)
AND L.REPORTING_DATE=  (SELECT MAX(REPORTING_DATE) FROM LOAN_LISTING)
AND MONTH(AA.ACCOUNT_OPEN_DATE) = MONTH(GETDATE()) AND   YEAR(AA.ACCOUNT_OPEN_DATE) = YEAR(GETDATE())
AND AA.ACCOUNT_NUMBER NOT IN (SELECT NEW_ACCOUNT_NUMBER FROM LOAN_TOP_UP)
AND PRODUCT_GROUP_DESCRIPTION NOT IN ('SAVINGS ACCOUNTS', 'CURRENT_ACCOUNTS', 
'FIXED DEPOSITS','Current Accounts')
AND SUB_BUSINESS_UNIT_CODE <>'CIB'
AND INDUSTRY_TYPE='DF01'
UNION
SELECT NEW_ACCOUNT_NUMBER AS ACCOUNT_NUMBER,  c.SEGMENT_CODE, TOP_UP_AMOUNT_BASE 
AS OPENING_BALANCE_BASE, NEW_ACCOUNT_OPENED_DATE AS ACCOUNT_OPEN_DATE,SUB_BUSINESS_UNIT_CODE AS BIZ_UNIT
FROM LOAN_TOP_UP L
LEFT OUTER JOIN dimCUSTOMERS C ON L.CUSTOMER_ID = C.CUSTOMER_ID
LEFT OUTER JOIN DIMACCOUNTS A ON L.NEW_ACCOUNT_NUMBER = A.ACCOUNT_NUMBER
LEFT OUTER JOIN DIMBRANCHES B ON A.BRANCH_ID = B.BRANCH_ID
LEFT OUTER JOIN dimREGIONS R ON B.REGION_CODE = R.REGION_CODE
LEFT OUTER JOIN DIMPRODUCTS P ON A.PRODUCT_CODE = P.PRODUCT_CODE
LEFT OUTER JOIN dimPRODUCT_GROUPS PG ON P.PRODUCT_GROUP_ID = PG.PRODUCT_GROUP_ID
LEFT OUTER JOIN dimSEGMENTS SG ON SG.SEGMENT_CODE=C.SEGMENT_CODE
LEFT OUTER JOIN LOAN_LISTING LL ON LL.ACCOUNT_NUMBER=L.NEW_ACCOUNT_NUMBER

WHERE 
--NEW_ACCOUNT_OPENED_DATE BETWEEN @DATE1 AND @DATE2
MONTH(NEW_ACCOUNT_OPENED_DATE) = MONTH(GETDATE()) AND   YEAR(NEW_ACCOUNT_OPENED_DATE) = YEAR(GETDATE())
AND REPORTING_DATE=  (SELECT MAX(REPORTING_DATE) FROM LOAN_LISTING)
AND PRODUCT_GROUP_DESCRIPTION NOT IN ('SAVINGS ACCOUNTS', 'CURRENT_ACCOUNTS', 'FIXED DEPOSITS','Current Accounts')

AND SUB_BUSINESS_UNIT_CODE <>'CIB'
AND INDUSTRY_TYPE='DF01'

) W

GROUP BY 
MONTH(ACCOUNT_OPEN_DATE)

UNION 

SELECT 
MONTH(ACCOUNT_OPEN_DATE)MTH,
COUNT(DISTINCT ACCOUNT_NUMBER)VOLUME, 
SUM(OPENING_BALANCE_BASE) DISBURSED_AMOUNT, 'YTD' AS PERIOD
FROM (

SELECT AA.ACCOUNT_NUMBER, C.SEGMENT_CODE,
OPENING_BALANCE_BASE, AA.ACCOUNT_OPEN_DATE,SUB_BUSINESS_UNIT_CODE AS BIZ_UNIT
FROM NEW_BUSINESS AA
LEFT OUTER JOIN dimCUSTOMERS C ON AA.CUSTOMER_ID = C.CUSTOMER_ID
LEFT OUTER JOIN DIMACCOUNTS A ON AA.ACCOUNT_NUMBER = A.ACCOUNT_NUMBER
LEFT OUTER JOIN DIMBRANCHES B ON AA.BRANCH_ID = B.BRANCH_ID
LEFT OUTER JOIN dimREGIONS R ON B.REGION_CODE = R.REGION_CODE
LEFT OUTER JOIN DIMPRODUCTS P ON AA.PRODUCT_CODE = P.PRODUCT_CODE
LEFT OUTER JOIN dimPRODUCT_GROUPS PG ON P.PRODUCT_GROUP_ID = PG.PRODUCT_GROUP_ID
LEFT OUTER JOIN dimSEGMENTS SG ON SG.SEGMENT_CODE=C.SEGMENT_CODE
LEFT OUTER JOIN LOAN_LISTING L ON L.ACCOUNT_NUMBER=AA.ACCOUNT_NUMBER

 
WHERE AA.REPORTING_DATE = (SELECT MAX(REPORTING_DATE) FROM NEW_BUSINESS)
AND L.REPORTING_DATE=  (SELECT MAX(REPORTING_DATE) FROM LOAN_LISTING)
AND YEAR(AA.ACCOUNT_OPEN_DATE) = YEAR(GETDATE())
AND AA.ACCOUNT_NUMBER NOT IN (SELECT NEW_ACCOUNT_NUMBER FROM LOAN_TOP_UP)
AND PRODUCT_GROUP_DESCRIPTION NOT IN ('SAVINGS ACCOUNTS', 'CURRENT_ACCOUNTS', 
'FIXED DEPOSITS','Current Accounts')
AND SUB_BUSINESS_UNIT_CODE <>'CIB'
AND INDUSTRY_TYPE='DF01'
UNION
SELECT NEW_ACCOUNT_NUMBER AS ACCOUNT_NUMBER,  c.SEGMENT_CODE, TOP_UP_AMOUNT_BASE 
AS OPENING_BALANCE_BASE, NEW_ACCOUNT_OPENED_DATE AS ACCOUNT_OPEN_DATE,SUB_BUSINESS_UNIT_CODE AS BIZ_UNIT
FROM LOAN_TOP_UP L
LEFT OUTER JOIN dimCUSTOMERS C ON L.CUSTOMER_ID = C.CUSTOMER_ID
LEFT OUTER JOIN DIMACCOUNTS A ON L.NEW_ACCOUNT_NUMBER = A.ACCOUNT_NUMBER
LEFT OUTER JOIN DIMBRANCHES B ON A.BRANCH_ID = B.BRANCH_ID
LEFT OUTER JOIN dimREGIONS R ON B.REGION_CODE = R.REGION_CODE
LEFT OUTER JOIN DIMPRODUCTS P ON A.PRODUCT_CODE = P.PRODUCT_CODE
LEFT OUTER JOIN dimPRODUCT_GROUPS PG ON P.PRODUCT_GROUP_ID = PG.PRODUCT_GROUP_ID
LEFT OUTER JOIN dimSEGMENTS SG ON SG.SEGMENT_CODE=C.SEGMENT_CODE
LEFT OUTER JOIN LOAN_LISTING LL ON LL.ACCOUNT_NUMBER=L.NEW_ACCOUNT_NUMBER

WHERE 
--NEW_ACCOUNT_OPENED_DATE BETWEEN @DATE1 AND @DATE2
YEAR(NEW_ACCOUNT_OPENED_DATE) = YEAR(GETDATE())
AND REPORTING_DATE=  (SELECT MAX(REPORTING_DATE) FROM LOAN_LISTING)
AND PRODUCT_GROUP_DESCRIPTION NOT IN ('SAVINGS ACCOUNTS', 'CURRENT_ACCOUNTS', 'FIXED DEPOSITS','Current Accounts')

AND SUB_BUSINESS_UNIT_CODE <>'CIB'
AND INDUSTRY_TYPE='DF01'

) W

GROUP BY 
MONTH(ACCOUNT_OPEN_DATE)

"""
#Bankview_existing=pd.read_csv(export_path+'Bank_view.txt')
DISBURSED_LOANS=pd.read_sql(DISBURSED_LOANS_query,connection)
#Bankview_final=pd.concat([Bankview_existing,Bankview_new])
DISBURSED_LOANS.to_csv(export_path+'DISBURSED_LOANS.txt',index=False)
print('|----DISBURSED_LOANS data')